=================================
To Use 0-add_integer.py
=================================

Contains a single funcion

```
add_integer(a, b=98)
```
Adds two integer

Usage:
======

Integer or float is passed to parameter `a, b`

Test function with integer

>>> add_integer = __import__('0-add_integer').add_integer

>>> add_integer(3, 6)
9
>>> add_integer(2)
100

>>> add_integer(-5, -8)
-13
>>> add_integer(4.0, 2.0)
6
>>> add_integer(2.0, 6)
8

>>> add_integer(2.5, 2.5)
4
>>> add_integer(-5, 3)
-2

>>> add_integer(1e100, 1e100)
89

Cases where error can occure
==========
passing a string as argument

>>> add_integer('h', 7)
Traceback (most recent call last):
        ...
TypeError: a must be an integer

>>> add_integer(9, 'hey')
Traceback (most recent call last):
        ...
TypeError: b must be an integer

>>> add_integer(9, '7')
Traceback (most recent call last):
        ...
TypeError: b must be an integer

passing a list as an argurement

>>> add_integer([], 7)
Traceback (most recent call last):
        ...
TypeError: a must be an integer

>>> add_integer(7, [1, 7, 8])
Traceback (most recent call last):
        ...
TypeError: b must be an integer

passing complex number as argurement

>>> add_integer(7, 1 + 4j)
Traceback (most recent call last):
        ...
TypeError: b must be an integer


